// ----------------------------------------------------------------------
// Caching
// ----------------------------------------------------------------------

/**
 * @class Phorum.Cache
 * @extends Object
 *
 * The Phorum.Cache singleton is a caching layer that can be used by Phorum
 * JavaScript code for handling client side data caching. The cache is a
 * simple key/value pair based data storage. It supports TTLs for automatically
 * expiring cached data.
 *
 * @singleton
 */
Phorum.Cache =
{
    /**
     * @property ttl
     *
     * The default TTL in seconds for cache entries. A value of 0 (zero)
     * can be used to cache the data indefinitely (or until a
     * {@link #purge purge()} is done on the cached data).
     *
     * @type Integer
     */
    ttl: 0,

    /**
     * @property data
     *
     * The cache storage.
     *
     * @type Object
     * @private
     */
    data: {},

    /**
     * Store data in the cache.
     *
     * @param {String} cache_id
     *   This id is used as the key under which to store the data
     *   in the cache. Make sure that you use globally unique cache id's
     *   (e.g. instead of "1234", it is advised to use something like
     *   "myapp-user-1234" to prevent collissions).
     * @param {mixed} data
     *   The data to store in the cache.
     * @param {Integer} ttl (optional)
     *   The TTL (time to live) in seconds for the cached data. If no TTL
     *   is provided or if it is not recognized as a valid number, then the
     *   default {@link #ttl Phorum.Cache.ttl} is used instead.
     */
    put: function (cache_id, data, ttl)
    {
        // Determine the TTL to use for the cache entry.
        if (ttl === undefined) {
            ttl = Phorum.Cache.ttl;
        } else {
            ttl = parseInt(ttl, 10);
            if (ttl === 'NaN') {
                ttl = Phorum.Cache.ttl;
            }
        }

        // Determine the expire time. When ttl = 0, then
        // no expiration is done at all.
        var expire_t = 0;
        if (ttl !== 0) {
            var d = new Date();
            expire_t = d.getTime() + 1000 * ttl;
        }

        // Store the data in the cache.
        Phorum.Cache.data[cache_id] = [data, expire_t];
    },

    /**
     * Retrieve data from the cache.
     *
     * @param {String} cache_id
     *   The key under which to the data was stored in the cache
     *   using {@link #put Phorum.Cache.put()}.
     *
     * @return mixed
     *   In case no cache data was found or the cache data expired,
     *   then null is returned. Otherwise, the cached data is returned.
     */
    get: function (cache_id)
    {
        // Check if there is a cache entry available.
        if (typeof Phorum.Cache.data[cache_id] === 'undefined') {
            Phorum.debug(
                'Phorum cache miss for cache_id "' + cache_id + '"', 5
            );
            return null;
        }
        var c = Phorum.Cache.data[cache_id];

        // TTL set? Then check if the cache entry hasn't expired yet.
        if (c[1] !== 0) {
            var d = new Date();
            var now = d.getTime();
            if (now > c[1]) {
                Phorum.debug(
                    'Phorum cache expired for cache_id "' + cache_id + '"', 5
                );
                return null;
            }
        }

        Phorum.debug('Phorum cache hit for cache_id "' + cache_id + '"', 5);
        return c[0];
    },

    /**
     * Purge a single cached item or the full cache.
     *
     * @param {String} cache_id (optional)
     *   When this parameter is provided, then the cache data for
     *   the cache_id is purged from the cache. Otherwise, the full
     *   cache is purged.
     */
    purge: function (cache_id)
    {
        if (cache_id !== undefined) {
            Phorum.Ajax.cache[cache_id] = null;
        } else {
            Phorum.Ajax.cache = {};
        }
    }
};

